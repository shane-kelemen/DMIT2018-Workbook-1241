@page "/SamplePages/InvoiceEditTable/{InvoiceID:int}/{CustomerID:int}/{EmployeeID:int}"
@using HogWildSystem.ViewModels
@using Microsoft.AspNetCore.Components.QuickGrid

<PageTitle>Invoice Edit</PageTitle>

<header>
    @if (InvoiceID == 0)
    {
        <h3>New Invoice</h3>
    }
    else
    {
        <h3>Invoice: @InvoiceID</h3>
    }
</header>

<div class="row">
    <h4>Invoice Date: @invoice.InvoiceDate.Date.ToShortDateString()</h4>
    <h4>Employee: @invoice.EmployeeName</h4>
    <h4>Customer: @invoice.CustomerName</h4>
</div>

<body>

    @*  <DataAnnotationsValidator /> *@
    <div>
        <h4>Search</h4>
        <p>
            <label>Categories:</label>
            <select @bind="categoryID" style="width: 140px; background-color: lightgray;">
                <option value="0">select ...</option>
                @foreach (var category in partCategories)
                {
                    <option value="@category.LookupID">@category.Name</option>
                }
            </select>
        </p>
        <p>
            <label>Description:</label>
            <input type="text" id="description" style="width: 140px; background-color: lightgray;" @bind="description" />
        </p>
        <button class="btn btn-primary" @onclick="SearchParts">Search</button>
    </div>

    @if (parts.Count() == 0)
    {
        <p><em>Please enter either a description or category</em></p>
    }

    @if (invoice.InvoiceLines.Any() || parts.Count() > 0)
    {
        <!-- Parts Table -->
        <QuickGrid Items="@parts.AsQueryable()" Class="quickgrid-row-divider">
            <TemplateColumn>
                <Microsoft.AspNetCore.Components.QuickGrid.CellTemplate Context="context">
                    <button class="btn btn-success" @onclick="() => AddPart(context.PartID)">Add</button>
                </Microsoft.AspNetCore.Components.QuickGrid.CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="@(p => p.CategoryName)" Title="CategoryName" Sortable="true" />
            <PropertyColumn Property="@(p => p.PartID)" Title="PartID" Sortable="true" />
            <PropertyColumn Property="@(p => p.Description)" Title="Description" Sortable="true" />
            <PropertyColumn Property="@(p => p.Cost)" Title="Cost" Sortable="true" />
            <PropertyColumn Property="@(p => p.Price)" Title="Price" Sortable="true" />
            <PropertyColumn Property="@(p => p.ROL)" Title="ROL" Sortable="true" />
            <PropertyColumn Property="@(p => p.QOH)" Title="QOH" Sortable="true" />
        </QuickGrid>
        <hr />
        <hr />
        <EditForm EditContext="editContext">
            <!-- Invoice Lines Table -->
            <table class="table table-bordered quickgrid-row-divider">
                <thead>
                <tr>
                    <th>Actions</th>
                    <th>Part ID</th>
                    <th>Description</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Ext. Price</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var line in invoice.InvoiceLines)
                {
                    <tr>
                        <!-- Action Column -->
                        <td>
                            <button class="btn btn-warning" @onclick="() => DeleteInvoiceLine(line.PartID)">Delete</button>
                        </td>
                        <!-- Part ID Column -->
                        <td>@line.PartID</td>
                        <!-- Description Column -->
                        <td>@line.Description</td>
                        <!-- Quantity Column -->
                        <td>
                            <!-- Input for Quantity -->
                            <input type="number" 
                                   @bind="line.Quantity" 
                                   class="input-mini" 
                                   @oninput="(e) => 
                                   { 
                                       // Synchronize the input value (from UI) with the corresponding field in the data model
                                       SyncQuantity(e.Value, line);   

                                       // Update the subtotal and tax whenever the quantity changes
                                       UpdateSubtotalAndTax();

                                       // Notify the EditContext that the Quantity field has changed
                                       // This triggers validation and updates the UI if there are any errors
                                       NotifyFieldChanged(line, nameof(line.Quantity)); 
                                   }" />
                            <!-- Display validation messages specific to the Quantity field -->
                            <ValidationMessage For="@(() => line.Quantity)" />
                        </td>

                        <!-- Price Column -->
                        <td>
                            <!-- Input for Price -->
                            <input type="number" 
                                   @bind="line.Price" 
                                   @oninput="(e) => 
                                   { 
                                       // Synchronize the input value (from UI) with the corresponding field in the data model
                                       SyncPrice(e.Value, line);   

                                       // Update the subtotal and tax whenever the price changes
                                       UpdateSubtotalAndTax();

                                       // Notify the EditContext that the Price field has changed
                                       // This triggers validation and updates the UI if there are any errors
                                       NotifyFieldChanged(line, nameof(line.Price)); 
                                   }" />
                            <!-- Display validation messages specific to the Price field -->
                            <ValidationMessage For="@(() => line.Price)" />
                        </td>

                        <!-- Ext. Price Column -->
                        <td>@(line.Quantity * line.Price)</td>
                    </tr>
                }
                </tbody>
            </table>

            </EditForm>
            <div class="row">
                <div class="stack-vertical">
                    <p>---------------------------</p>
                    <p>SubTotal: @invoice.SubTotal.ToString("c")</p>
                    <p>Tax: @invoice.Tax.ToString("c")</p>
                    <p>==============</p>
                    <p><strong>Total: @invoice.Total.ToString("c")</strong></p>
                </div>
            </div>
    }
    <div>
        <button class="btn btn-primary" @onclick="Save">Save</button>
        <button class="btn btn-secondary" @onclick="Close">Close/Cancel</button>
    </div>

</body>

<footer>
    @if (hasFeedback)
    {
        <blockquote>@feedbackMessage</blockquote>
    }
    @if (hasError)
    {
        <blockquote>
            @errorMessage
            <ul>
                @foreach (var detail in errorDetails)
                {
                    <li>@detail</li>
                }
            </ul>
        </blockquote>
    }
</footer>

<SimpleDialog IsVisible="@showDialog"
              Message="@dialogMessage"
              OnClose="@(e => SimpleDialogResult(e))"></SimpleDialog>





